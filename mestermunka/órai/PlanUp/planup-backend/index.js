const express = require('express');
const mysql = require('mysql2/promise');
const cors = require('cors');
const bcrypt = require('bcrypt');
const dbConfig = require('./config/dbConfig'); // Adatb√°zis konfigur√°ci√≥ import√°l√°sa
const programRoutes = require('./routes/programs'); 
const userRoutes = require('./routes/users');
const roomRoutes = require('./routes/rooms'); // Router import√°l√°sa
const profileRoutes = require('./routes/profiles');

// Az app inicializ√°l√°sa
const app = express();

// Middleware-ek
app.use(express.json());
app.use(cors());

// üîπ Statikus f√°jlok kiszolg√°l√°sa (FONTOS!)
app.use('/images', express.static('public/images'));
app.use('/images', express.static(__dirname + '/public/images'));

// üîπ Route-ok regisztr√°l√°sa
app.use('/rooms', roomRoutes);
app.use('/profile', profileRoutes);

// üîπ **Glob√°lisan defini√°ljuk a db v√°ltoz√≥t**
let db;

// Middleware: az adatb√°zis kapcsolat biztos√≠t√°sa minden k√©r√©shez
app.use(async (req, res, next) => {
  try {
    if (!db) {
      db = await mysql.createConnection(dbConfig);
      console.log('Adatb√°zis kapcsolat √∫jra l√©trehozva.');
    }
    req.db = db;
    next();
  } catch (err) {
    console.error('Hiba az adatb√°zis √∫jracsatlakoz√°s sor√°n:', err.message);
    res.status(500).json({ error: 'Adatb√°zis kapcsolat sikertelen.' });
  }
});

// √ötvonalak regisztr√°l√°sa
app.use('/programs', programRoutes);
app.use('/rooms', roomRoutes);

// Regisztr√°ci√≥
app.post('/auth/register', async (req, res) => {
  const { username, password, email } = req.body;

  if (!username || !password || !email) {
    return res.status(400).json({ error: 'Minden mez≈ë kit√∂lt√©se k√∂telez≈ë!' });
  }

  try {
    const hashedPassword = bcrypt.hashSync(password, 10);
    const [result] = await req.db.execute(
      'INSERT INTO Users (Username, PasswordHash, Email) VALUES (?, ?, ?)',
      [username, hashedPassword, email]
    );
    res.status(201).json({ message: 'User registered successfully', userID: result.insertId });
  } catch (error) {
    console.error('Regisztr√°ci√≥s hiba:', error.message);
    res.status(500).json({ error: 'Failed to register user', details: error.message });
  }
});

// Bejelentkez√©s
app.post('/login', async (req, res) => {
  const { email, password } = req.body;

  if (!email || !password) {
    return res.status(400).json({ error: 'Felhaszn√°l√≥n√©v √©s jelsz√≥ sz√ºks√©ges!' });
  }

  try {
    const [users] = await req.db.execute('SELECT * FROM Users WHERE Email = ?', [email]);

    if (users.length === 0) {
      return res.status(401).json({ error: '√ârv√©nytelen hiteles√≠t≈ë adatok' });
    }

    const user = users[0];
    const isPasswordValid = bcrypt.compareSync(password, user.PasswordHash);

    if (!isPasswordValid) {
      return res.status(401).json({ error: '√ârv√©nytelen hiteles√≠t≈ë adatok' });
    }

    res.status(200).json({ message: 'Sikeres bejelentkez√©s', userID: user.UserID });
  } catch (error) {
    console.error('Bejelentkez√©si hiba:', error.message);
    res.status(500).json({ error: 'Bejelentkez√©s sikertelen', details: error.message });
  }
});

// Teszt √∫tvonal
app.get('/', (req, res) => {
  res.send('Express.js backend m≈±k√∂dik!');
});

// Szerver ind√≠t√°sa
const PORT = 3001;
app.listen(PORT, () => {
  console.log(`Szerver fut a http://localhost:${PORT} c√≠men`);
});

// üîπ Program funkci√≥k
app.get('/programs', async (req, res) => {
  const { cost, duration } = req.query;

  let query = "SELECT ProgramID, Name, Description, Duration, Cost, Location, Image FROM Programs WHERE 1=1";
const params = [];

if (cost !== undefined) {
  query += " AND Cost = ?";
  params.push(cost === 'true' ? 1 : 0);
}

if (duration !== undefined) {
  query += " AND Duration = ?";
  params.push(parseInt(duration, 10));
}


  try {
    const [programs] = await req.db.execute(query, params);

    const formattedPrograms = programs.map(prog => ({
      ...prog,
      Cost: Boolean(prog.Cost),
      Image: prog.Image.startsWith('/images/') ? prog.Image : `/images/${prog.Image}` // Helyes k√©p√∫tvonal biztos√≠t√°sa
    }));

    res.status(200).json(formattedPrograms);
  } catch (error) {
    console.error('Hiba t√∂rt√©nt a programok sz≈±r√©se sor√°n:', error.message);
    res.status(500).json({ error: 'Hiba t√∂rt√©nt a programok sz≈±r√©se sor√°n.' });
  }
});

// üîπ V√©letlenszer≈± program lek√©r√©se
app.get('/programs/random', async (req, res) => {
  try {
    const [program] = await req.db.execute('SELECT * FROM Programs ORDER BY RAND() LIMIT 1');

    if (program[0]) {
      program[0].Cost = Boolean(program[0].Cost);
      program[0].Image = `/images/${program[0].Image}`;
    }

    res.status(200).json(program[0] || {});
  } catch (error) {
    console.error('Hiba a v√©letlenszer≈± program lek√©rdez√©se sor√°n:', error.message);
    res.status(500).json({ error: 'Hiba t√∂rt√©nt egy v√©letlenszer≈± program lek√©rdez√©se sor√°n.' });
  }
});

// üîπ Program kedvel√©se
app.post('/programs/:id/like', async (req, res) => {
  const { id } = req.params;
  const { userId } = req.body;

  if (!userId) {
    return res.status(400).json({ error: 'UserID sz√ºks√©ges!' });
  }

  try {
    await req.db.execute('INSERT INTO SwipeActions (UserID, ProgramID, Action) VALUES (?, ?, "like")', [userId, id]);
    res.status(200).json({ message: 'A program sikeresen kedvelve lett.' });
  } catch (error) {
    console.error('Kedvel√©si hiba:', error.message);
    res.status(500).json({ error: 'Hiba t√∂rt√©nt a program kedvel√©se sor√°n.' });
  }
});

// üîπ Program elutas√≠t√°sa
app.post('/programs/:id/dislike', async (req, res) => {
  const { id } = req.params;
  const { userId } = req.body;

  if (!userId) {
    return res.status(400).json({ error: 'UserID sz√ºks√©ges!' });
  }

  try {
    await req.db.execute('INSERT INTO SwipeActions (UserID, ProgramID, Action) VALUES (?, ?, "dislike")', [userId, id]);
    res.status(200).json({ message: 'A program sikeresen nem kedvelt.' });
  } catch (error) {
    console.error('Nem kedvel√©si hiba:', error.message);
    res.status(500).json({ error: 'Hiba t√∂rt√©nt a program nem kedvel√©se sor√°n.' });
  }
});
