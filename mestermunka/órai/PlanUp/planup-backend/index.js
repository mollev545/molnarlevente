const express = require('express');
const mysql = require('mysql2/promise');
const cors = require('cors');
const bcrypt = require('bcrypt');
const dbConfig = require('./config/dbConfig');
const programRoutes = require('./routes/programs');
const userRoutes = require('./routes/users');
const roomRoutes = require('./routes/rooms'); // Router import√°l√°sa
const profileRoutes = require('./routes/profiles');
const authRoutes = require('./routes/auth');

const app = express();

app.use(express.json());
app.use(cors());

let db;

// √ötvonalak regisztr√°l√°sa
app.use('/images', express.static('public/images'));
app.use('/rooms', roomRoutes);
app.use('/profile', profileRoutes);
app.use('/programs', programRoutes);
app.use('/users', userRoutes);
app.use('/auth', authRoutes);


app.use(async (req, res, next) => {
  try {
    if (!db) {
      console.log('üîÑ Kapcsol√≥d√°s az adatb√°zishoz...');
      db = await mysql.createConnection(dbConfig);
      console.log('‚úÖ Sikeres kapcsolat az adatb√°zishoz!');
    }
    req.db = db;
    next();
  } catch (err) {
    console.error('‚ùå Hiba az adatb√°zis csatlakoz√°sn√°l:', err);
    res.status(500).json({ error: 'Nincs adatb√°zis kapcsolat.', details: err.message });
  }
});



// Regisztr√°ci√≥
app.post('/auth/register', async (req, res) => {
  const { username, password, email } = req.body;
  if (!username || !password || !email) {
    return res.status(400).json({ error: 'Minden mez≈ë kit√∂lt√©se k√∂telez≈ë!' });
  }
  try {
    const hashedPassword = bcrypt.hashSync(password, 10);
    const [result] = await req.db.execute(
      'INSERT INTO Users (Username, PasswordHash, Email) VALUES (?, ?, ?)',
      [username, hashedPassword, email]
    );
    res.status(201).json({ message: 'User registered successfully', userID: result.insertId });
  } catch (error) {
    console.error('Regisztr√°ci√≥s hiba:', error.message);
    res.status(500).json({ error: 'Failed to register user', details: error.message });
  }
});

// Bejelentkez√©s
app.post('/login', async (req, res) => {
  const { email, password } = req.body;
  if (!email || !password) {
    return res.status(400).json({ error: 'Felhaszn√°l√≥n√©v √©s jelsz√≥ sz√ºks√©ges!' });
  }
  try {
    const [users] = await req.db.execute('SELECT * FROM Users WHERE Email = ?', [email]);
    if (users.length === 0) {
      return res.status(401).json({ error: '√ârv√©nytelen hiteles√≠t≈ë adatok' });
    }
    const user = users[0];
    const isPasswordValid = bcrypt.compareSync(password, user.PasswordHash);
    if (!isPasswordValid) {
      return res.status(401).json({ error: '√ârv√©nytelen hiteles√≠t≈ë adatok' });
    }
    res.status(200).json({ message: 'Sikeres bejelentkez√©s', userID: user.UserID });
  } catch (error) {
    console.error('Bejelentkez√©si hiba:', error.message);
    res.status(500).json({ error: 'Bejelentkez√©s sikertelen', details: error.message });
  }
});

// Teszt √∫tvonal
app.get('/', (req, res) => {
  res.send('Express.js backend m≈±k√∂dik!');
});

// Programok list√°z√°sa
app.get('/programs', async (req, res) => {
  try {
    const [programs] = await req.db.execute('SELECT ProgramID, Name, Description, Price, IsPaid, DurationType FROM Programs');
    res.status(200).json(programs);
  } catch (error) {
    console.error('Hiba t√∂rt√©nt a programok lek√©rdez√©se sor√°n:', error.message);
    res.status(500).json({ error: 'Hiba t√∂rt√©nt a programok lek√©rdez√©se sor√°n.' });
  }
});

// V√©letlenszer≈± program lek√©r√©se
app.get('/programs/random', async (req, res) => {
  try {
    console.log("üîç Program kiv√°laszt√°sa az adatb√°zisb√≥l...");
    const [program] = await req.db.execute('SELECT * FROM Programs ORDER BY RAND() LIMIT 1');

    if (program.length === 0) {
      console.warn("‚ö†Ô∏è Nincs el√©rhet≈ë program az adatb√°zisban!");
      return res.status(404).json({ error: 'Nincs el√©rhet≈ë program az adatb√°zisban.' });
    }

    program[0].Image = `/images/${program[0].Image}`;
    console.log("‚úÖ Program sikeresen bet√∂ltve:", program[0]);
    res.status(200).json(program[0]);

  } catch (error) {
    console.error('‚ùå Hiba a v√©letlenszer≈± program lek√©rdez√©se sor√°n:', error);
    res.status(500).json({ error: 'Szerverhiba t√∂rt√©nt.', details: error.message });
  }
});

// Program kedvel√©se
app.post('/programs/:id/like', async (req, res) => {
  const { id } = req.params;
  const { userId } = req.body;
  if (!userId) {
    return res.status(400).json({ error: 'UserID sz√ºks√©ges!' });
  }
  try {
    await req.db.execute('INSERT INTO SwipeActions (UserID, ProgramID, Action) VALUES (?, ?, "like")', [userId, id]);
    res.status(200).json({ message: 'A program sikeresen kedvelve lett.' });
  } catch (error) {
    console.error('Kedvel√©si hiba:', error.message);
    res.status(500).json({ error: 'Hiba t√∂rt√©nt a program kedvel√©se sor√°n.' });
  }
});

// Program nem kedvel√©se
app.post('/programs/:id/dislike', async (req, res) => {
  const { id } = req.params;
  const { userId } = req.body;
  if (!userId) {
    return res.status(400).json({ error: 'UserID sz√ºks√©ges!' });
  }
  try {
    await req.db.execute('INSERT INTO SwipeActions (UserID, ProgramID, Action) VALUES (?, ?, "dislike")', [userId, id]);
    res.status(200).json({ message: 'A program sikeresen nem kedvelt.' });
  } catch (error) {
    console.error('Nem kedvel√©si hiba:', error.message);
    res.status(500).json({ error: 'Hiba t√∂rt√©nt a program nem kedvel√©se sor√°n.' });
  }
});

const PORT = 3001;
app.listen(PORT, () => {
  console.log(`Szerver fut a http://localhost:${PORT} c√≠men`);
});
